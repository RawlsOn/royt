# edited 2024-03-03

# /Users/kimmyounghoon/Works/mkay/common/api-gateway/common 여기서 수정한 후 카피해 올 것
# cp ~/Works/mkay/common/api-gateway/common/ms_skeleton/* ./api-gateway/ms_skeleton/

import io, sys, time, os, glob, pprint, json, re, shutil, ntpath, csv
pp = pprint.PrettyPrinter(indent=2) # pp.pprint()


"""
Django settings for ms_skeleton project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import json
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ADMIN_PREFIX = 'adminachy'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

ADMIN_EMAIL = 'admin@admin.com'

# docker run을 기본으로 하는데 그래도 로컬 머신에서 돌려보고 싶을 경우
import os

SERVICE_NAME= os.getenv('SERVICE_NAME')
PROJECT_NAME= os.getenv('PROJECT_NAME')
RUNNING_ENV= os.getenv('RUNNING_ENV')

print('PROJECT_NAME', PROJECT_NAME)
print('RUNNING_ENV', RUNNING_ENV)

LOG_FILE = f'/usr/log/{PROJECT_NAME}{RUNNING_ENV}/django-all.log'
ROMSG_LOG_FILE = f'/usr/log/{PROJECT_NAME}{RUNNING_ENV}/romsg.log'

print('LOG_FILE', LOG_FILE)

DATA_DIR = f'/usr/data/{PROJECT_NAME}{RUNNING_ENV}'

print('DATA_DIR', DATA_DIR)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS").split(" ")
print('ALLOWED_HOSTS', ALLOWED_HOSTS)

CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS").split(" ")
print('CSRF_TRUSTED_ORIGINS', CSRF_TRUSTED_ORIGINS)

BE_URL = os.getenv('BE_URL')
DOMAIN = BE_URL.split('//')[1].replace(':', '')
FE_URL = os.getenv('FE_URL')

CORS_ORIGIN_WHITELIST = os.getenv('CORS_ORIGIN_WHITELIST').split(" ")

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',

    # sentry
    'sentry-trace'
]

SECRET_KEY= os.getenv('SECRET_KEY')

JWT_ACCESS_TOKEN_LIFETIME_MIN= int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME_MIN'))
JWT_REFRESH_TOKEN_LIFETIME_MIN= int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME_MIN'))

SLACK_HOOK_URL= os.getenv('SLACK_HOOK_URL')
SLACK_BOT_TOKEN= os.getenv('SLACK_BOT_TOKEN')
SLACK_CHANNEL_ID = os.getenv('SLACK_CHANNEL_ID')

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME")

AWS_DEFAULT_ACL = None
AWS_S3_IMAGE_UPLOAD_TO = PROJECT_NAME + '/' + RUNNING_ENV[0].lower()
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

KAKAOMAP_YEK = os.getenv('KAKAOMAP_YEK')
KAKAO_REST_API_KEY = os.getenv('KAKAO_REST_API_KEY')
# 지메일에서 앱 비밀번호 설정 못 찾을 때는 어카운트 검색창에서 앱 비밀번호로 검색해 볼 것
GMAIL_APP_PASSWORD = os.getenv('GMAIL_APP_PASSWORD')
GMAIL_SENDER = os.getenv('GMAIL_SENDER')

VWORLD_KEY = os.getenv('VWORLD_KEY')

MSG_TARGET = os.getenv('MSG_TARGET').split(',')

TELEGRAM_BOT_CODE= os.getenv('TELEGRAM_BOT_CODE')
TELEGRAM_CHAT_ID= os.getenv('TELEGRAM_CHAT_ID')

# print('AWS_STORAGE_BUCKET_NAME', AWS_STORAGE_BUCKET_NAME)
# print('AWS_S3_IMAGE_UPLOAD_TO', AWS_S3_IMAGE_UPLOAD_TO)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'django_filters',
    'django_extensions',
    'rest_framework',
    # 'rest_framework_gis',
    'rest_framework_simplejwt',
    'drf_yasg',
    # 'import_export',
    # 'django.contrib.gis',

    'base',
    'config',

    # user는 DB를 분리할 수 없음. 빼면 오류남.
    'user',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'admin_reorder.middleware.ModelAdminReorder',
]

ADMIN_REORDER = (
    # {'app': 'main', 'label': '원맵', 'models': (
    #     {'model': 'main.상가', 'label': '상가'},
    # )},
)

ROOT_URLCONF = 'ms_skeleton.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates',],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ms_skeleton.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

print('RUNNING_ENV', os.getenv('RUNNING_ENV'))

DATABASES = {
    "default": json.loads(os.getenv('DEFAULT_DATABASE')),
}

DATABASE_ROUTERS = [
]

def add_app(app, db_type='normal', project_name=PROJECT_NAME):
    INSTALLED_APPS.append(app)
    engine = 'django.db.backends.sqlite3'
    if db_type == 'spatialite':
        engine = 'django.contrib.gis.db.backends.spatialite'
    DATABASES[app] = {
        "ENGINE": engine,
        "NAME":f'/usr/data/{project_name}{RUNNING_ENV}/{app}_db.sqlite3',
        "OPTIONS": {"timeout": 5}
    }
    DATABASE_ROUTERS.append(f'common.custom.CustomRouter.{app.capitalize()}Router')

pp.pprint(DATABASES)

# APP_TO_ADD= os.getenv('APP_TO_ADD').strip().split(',')
# print('APP_TO_ADD', APP_TO_ADD)

# for app in APP_TO_ADD:
#     if app:
#         app_name, project_name = app.split('|')
#         add_app(app_name, project_name=project_name)
# add_spatialite('dorogglinecore')

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'user.CustomUser'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # username 필드 사용 x
ACCOUNT_EMAIL_REQUIRED = True            # email 필드 사용 o
ACCOUNT_USERNAME_REQUIRED = False        # username 필드 사용 x
ACCOUNT_AUTHENTICATION_METHOD = 'email'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

APPEND_SLASH = False

# LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False # False여야 한국시간으로 나옴

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.SessionAuthentication', # for swagger
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_PAGINATION_CLASS': 'main.pagination.LargeResultsSetPagination',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],

    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'loginjoin': '3/min',
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=JWT_ACCESS_TOKEN_LIFETIME_MIN),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=JWT_REFRESH_TOKEN_LIFETIME_MIN),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        },
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'console_debug_false': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'file': {
            'level': 'DEBUG',
            'encoding': 'utf-8',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 99,
            'formatter': 'standard',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_debug_false', 'file'],
            'handlers': ['console', 'file', 'console'],
            'handlers': ['file'],
            'level': 'INFO',
        },
        'apps': {
            'handlers': ['console', 'console_debug_false', 'file'],
            'handlers': ['console', 'file', 'console'],
            'handlers': ['file'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
        'logfile': {
            'level': 'DEBUG',
            'encoding': 'utf-8',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_FILE,
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 99,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['logfile', 'console',],
            'level': 'INFO',
            'propagate': True,
        },
        'apps': {
            'handlers': ['logfile', 'console',],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# import sentry_sdk
# from sentry_sdk.integrations.django import DjangoIntegration
# sentry_sdk.init(
#     dsn=os.getenv('SENTRY_KEY'),
#     integrations=[DjangoIntegration()],

#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     # We recommend adjusting this value in production.
#     traces_sample_rate=1.0,

#     # If you wish to associate users to errors (assuming you are using
#     # django.contrib.auth) you may enable sending PII data.
#     send_default_pii=True
# )